#GKE Private Cluster
====================================================================================================
#Set Local Varaibles
====================
BASEFOLDERPATH=""
OWNER=
PROJECT_ID=
GSA_DISPLAY_NAME=
GSA=$GSA_DISPLAY_NAME@$PROJECT_ID.iam.gserviceaccount.com
VPC_NAME=
CLUSTER_SUBNET_NAME=
PROXY_SUBNET_NAME=
PSC_SUBNET_NAME=
JUMP_SERVER_SUBNET_NAME=
CLUSTER=
NODEPOOL=
REGION=asia-southeast1
ZONE=asia-southeast1-a
IP_ADDRESS_NAME=
CERTIFICATE_NAME=
DOMAIN1_NAME=
DOMAIN2_NAME=
DOMAIN_LIST=$DOMAIN1_NAME,$DOMAIN2_NAME
DNS_ZONE=
AR_REPO=
JUMP_SERVER_NAME=
JUMPSERVER_IP=$(gcloud compute addresses describe gke-jump-server-ip --format="get(address)")
JUMPSERVER_PRIVATE_IP=$(gcloud compute addresses describe gke-jump-server-private-ip --format="get(address)")


gcloud auth list
gcloud config set account $OWNER
gcloud services enable cloudresourcemanager.googleapis.com

gcloud config set project $PROJECT_ID

gcloud services enable cloudresourcemanager.googleapis.com
gcloud services enable compute.googleapis.com
gcloud services enable container.googleapis.com
gcloud services enable storage.googleapis.com
gcloud services enable artifactregistry.googleapis.com
gcloud services enable servicenetworking.googleapis.com
gcloud services enable certificatemanager.googleapis.com
gcloud services enable cloudbuild.googleapis.com

gcloud config set compute/region $REGION
gcloud config set compute/zone $ZONE

#gcloud iam service-accounts create $GSA_DISPLAY_NAME --display-name=$GSA_DISPLAY_NAME
gcloud iam service-accounts list
#gcloud iam service-accounts keys create $BASEFOLDERPATH/Misc/$GSA_DISPLAY_NAME.json --iam-account=$GSA
#gcloud projects add-iam-policy-binding $PROJECT_ID --member=serviceAccount:$GSA --role=roles/owner

gcloud auth activate-service-account $GSA --key-file=$BASEFOLDERPATH/misc/$GSA_DISPLAY_NAME.json
#gcloud config set account $GSA
gcloud auth list

gcloud config set project $PROJECT_ID
gcloud config set compute/region $REGION
gcloud config set compute/zone $ZONE

Network
====================================
gcloud compute networks create $VPC_NAME --subnet-mode=custom --bgp-routing-mode=regional --mtu=1460
#gcloud compute networks delete $VPC_NAME

gcloud compute networks subnets create $CLUSTER_SUBNET_NAME --network=$VPC_NAME --range=10.0.20.0/22 --region=$REGION
#gcloud compute networks subnets delete $CLUSTER_SUBNET_NAME --region=$REGION

gcloud compute networks subnets create $PSC_SUBNET_NAME	--purpose=PRIVATE_SERVICE_CONNECT --role=ACTIVE \
--network=$VPC_NAME --range=10.0.1.0/24
#gcloud compute networks subnets delete $PSC_SUBNET_NAME

gcloud compute networks subnets create $PROXY_SUBNET_NAME --purpose=REGIONAL_MANAGED_PROXY --role=ACTIVE \
--network=$VPC_NAME  --range=10.0.2.0/24
#gcloud compute networks subnets delete $PROXY_SUBNET_NAME

gcloud compute networks subnets update $CLUSTER_SUBNET_NAME \
--add-secondary-ranges=pods-range=10.8.0.0/16,services-range=10.9.0.0/16
#gcloud compute networks subnets delete $CLUSTER_SUBNET_NAME

gcloud compute networks subnets create $JUMP_SERVER_SUBNET_NAME --network=spoke-vpc --range=10.0.8.0/24
#gcloud compute networks subnets delete $JUMP_SERVER_SUBNET_NAME

gcloud compute networks subnets list --network=$VPC_NAME

gcloud compute firewall-rules create allow-egress --allow --destination-ranges=0.0.0.0/0 --direction=EGRESS --network=$VPC_NAME
gcloud compute firewall-rules create allow-http-ingress --allow=tcp:80,tcp:443 --source-ranges=0.0.0.0/0 --direction=INGRESS --network=$VPC_NAME
gcloud compute firewall-rules create allow-ssh --allow=tcp:22 --source-ranges=0.0.0.0/0 --direction=INGRESS --network=$VPC_NAME

gcloud compute firewall-rules create allow-spoke-health-check --network=$VPC_NAME \
--action=allow --direction=ingress --source-ranges=130.211.0.0/22,35.191.0.0/16 --rules=tcp
#gcloud compute firewall-rules delete allow-spoke-health-check

gcloud compute firewall-rules create allow-spoke-proxies --network=$VPC_NAME \
--action=allow --direction=ingress --source-ranges=10.0.2.0/24 --rules=tcp:80,tcp:443,tcp:8080
#gcloud compute firewall-rules delete allow-spoke-proxies

gcloud compute firewall-rules  list --format="table(name, network)" --filter="network=$VPC_NAME"

#Jumper VM
===============
gcloud compute addresses create gke-jump-server-ip --region=$REGION
JUMPSERVER_IP=$(gcloud compute addresses describe gke-jump-server-ip --format="get(address)")

gcloud compute addresses create gke-jump-server-private-ip --subnet=jumper-server-spoke-subnet \
--addresses=10.0.8.100 --region=$REGION
JUMPSERVER_PRIVATE_IP=$(gcloud compute addresses describe gke-jump-server-private-ip --format="get(address)")
#gcloud compute addresses delete gke-jump-server-private-ip

gcloud compute instances create $JUMP_SERVER_NAME --machine-type=n2d-standard-2 \
--image-family=ubuntu-pro-2004-lts --image-project=ubuntu-os-pro-cloud \
--network=spoke-vpc --subnet=$JUMP_SERVER_SUBNET_NAME --address=$JUMPSERVER_IP \
--private-network-ip=$JUMPSERVER_PRIVATE_IP --zone=$ZONE --project=$PROJECT_ID
#gcloud compute instances delete $JUMP_SERVER_NAME --zone=asia-southeast1-b --project=$PROJECT_SPOKE

gcloud compute instances describe $JUMP_SERVER_NAME --format="get(networkInterfaces[0].networkIP)" \
--project=$PROJECT_ID
gcloud compute instances describe $JUMP_SERVER_NAME --format="get(networkInterfaces[0].accessConfigs[0].natIP)" \
--project=$PROJECT_ID

Artifact Registry
=====================
gcloud artifacts repositories create $AR_REPO --repository-format=docker --location=$REGION
gcloud artifacts repositories list --location=$REGION
gcloud artifacts repositories describe $AR_REPO --location=$REGION
#gcloud artifacts repositories delete $AR_REPO --location=$REGION

Certificate
============
gcloud compute ssl-certificates create $CERTIFICATE_NAME --domains=$DOMAIN_LIST --global
gcloud compute ssl-certificates list --global
#gcloud compute ssl-certificates delete $CERTIFICATE_NAME

#Copy necessary files to Jumper VM
=====================================
gcloud compute scp --recurse ./istio-gateways/ sa_103378869835739905684@$JUMP_SERVER_NAME:~/csm/
gcloud compute scp --recurse ./apps sa_103378869835739905684@$JUMP_SERVER_NAME:~/csm
gcloud compute scp --recurse ./manifests sa_103378869835739905684@$JUMP_SERVER_NAME:~/csm/
gcloud compute scp --recurse ./monitoring sa_103378869835739905684@$JUMP_SERVER_NAME:~/csm/
gcloud compute scp --recurse ./keda-scalers sa_103378869835739905684@$JUMP_SERVER_NAME:~/csm/

#Connect to the Jumper VM
===========================================================================
gcloud compute ssh $JUMP_SERVER_NAME

#Install Docker
=========================
# Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo groupadd docker
sudo usermod -aG docker $USER
#Log out and log back in so that your group membership is re-evaluated
docker run hello-world

#Install Kubectl
=========================
sudo snap install kubectl --classic
kubectl version --client

#Install Helm
=========================
curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
sudo apt-get install apt-transport-https --yes
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
sudo apt-get update
sudo apt-get install helm

#Install gcloud CLI
====================
sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates gnupg curl
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
sudo apt-get update && sudo apt-get install google-cloud-cli
gcloud init
sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin

#Create and Operate the Cluster
================================
#Set Local Varaibles (inside Jumper VM)
================================================
BASEFOLDERPATH="./csm"
OWNER=
PROJECT_ID=
GSA_DISPLAY_NAME=
GSA=$GSA_DISPLAY_NAME@$PROJECT_ID.iam.gserviceaccount.com
VPC_NAME=
CLUSTER_SUBNET_NAME=
PROXY_SUBNET_NAME=
PSC_SUBNET_NAME=
JUMP_SERVER_SUBNET_NAME=
CLUSTER=
NODEPOOL=
REGION=asia-southeast1
ZONE=asia-southeast1-a
IP_ADDRESS_NAME=
CERTIFICATE_NAME=
DOMAIN1_NAME=
DOMAIN2_NAME=
DOMAIN_LIST=$DOMAIN1_NAME,$DOMAIN2_NAME
DNS_ZONE=
AR_REPO=
JUMP_SERVER_NAME=
JUMPSERVER_IP=$(gcloud compute addresses describe gke-jump-server-ip --format="get(address)")
JUMPSERVER_PRIVATE_IP=$(gcloud compute addresses describe gke-jump-server-private-ip --format="get(address)")

#Create GKE Private Cluster
====================================
gcloud container clusters create $CLUSTER --release-channel=regular --region=$REGION \
--enable-ip-alias --machine-type=n2d-standard-2 \
--num-nodes=1 --max-pods-per-node=40 \
--network=$VPC_NAME --subnetwork=$CLUSTER_SUBNET_NAME \
--cluster-secondary-range-name=pods-range --services-secondary-range-name=services-range \
--service-account=$GSA --workload-pool=$PROJECT_ID.svc.id.goog \
--enable-master-authorized-networks --enable-private-nodes --enable-private-endpoint \
--master-authorized-networks=$JUMPSERVER_PRIVATE_IP/32 --master-ipv4-cidr=10.0.7.0/28 \
--addons GcsFuseCsiDriver,HttpLoadBalancing
#gcloud container clusters delete $CLUSTER --region=$REGION

gcloud container clusters get-credentials $CLUSTER --project=$PROJECT_ID --region=$REGION
==========================================================================================
#Configure CSM
=========================
gcloud container fleet mesh enable --project $PROJECT_ID
gcloud container clusters update $CLUSTER --location $REGION --fleet-project $PROJECT_ID
gcloud container fleet memberships list --project $PROJECT_ID

gcloud container fleet mesh update --management automatic \
--memberships $CLUSTER --project $PROJECT_ID --location $REGION
#gcloud container clusters update $CLUSTER --clear-fleet-project --region=$REGION

gcloud container fleet mesh describe --project $PROJECT_ID
#Wait for the State to become 'ACTIVE'

#Install Ingress and Egress Gateways
==================================================
k create namespace asm-ingress
#k delete ns sm-ingress

k label namespace asm-ingress istio-injection=enabled
#k label namespace asm-ingress istio-injection-

#Make necessaey changes in the istio-ingressgateway/service.yaml to deploy it as ILB or ClusterIP

k apply -f $BASEFOLDERPATH/istio-gateways/istio-ingressgateway -n asm-ingress
#k delete -f $BASEFOLDERPATH//istio-gatewayss/istio-ingressgateway -n asm-ingress

k apply -f $BASEFOLDERPATH/istio-gateways/istio-egressgateway -n asm-ingress
#k delete -f BASEFOLDERPATH/istio-gateways/istio-egressgateway -n asm-ingress

#If istio-ingressgateway is deployed as ILB then create Service Attachments and PSC NEG
====================================================================================================
gcloud compute service-attachments create gke-asm-attachment --region=$REGION \
--producer-forwarding-rule=a7cfa314cf0e348dab210e9fc0b1f763 \
--connection-preference=ACCEPT_AUTOMATIC --nat-subnets=spoke-psc-subnet
#gcloud compute service-attachments delete gke-asm-attachment

gcloud compute network-endpoint-groups create gke-asm-neg --network-endpoint-type=private-service-connect \
--psc-target-service=$(gcloud compute service-attachments describe gke-asm-attachment --region=$REGION --format="get(selfLink)") \
--network=spoke-vpc --subnet=spoke-psc-subnet --region=$REGION
#gcloud compute network-endpoint-groups delete gke-asm-neg --region=$REGION

#Create new Nodepool to host application Workloads
=====================================================
gcloud container node-pools create $NODEPOOL --cluster=$CLUSTER --region=$REGION \
--num-nodes=1 --enable-autoscaling --machine-type=n2d-standard-4 \
--min-nodes=1 --max-nodes=50 --max-pods-per-node=30 \
--service-account=$GSA
#gcloud container node-pools delete gkeappspool --cluster=$CLUSTER --region=$REGION

#Create Smoke namespace
=========================
k create ns smoke
#k delete ns smoke

k label namespace smoke istio-injection=enabled
#k label namespace smoke istio-injection-

#Deploy Test applications for sanity checks
=================================================
helm upgrade --install --create-namespace smoke-tests-chart-nginx \
$BASEFOLDERPATH/apps/smoke/smoke-tests-chart/ -n smoke \
-f $BASEFOLDERPATH/apps/smoke/smoke-tests-chart/values-nginx.yaml
#helm uninstall smoke-tests-chart-nginx -n smoke

helm upgrade --install --create-namespace smoke-tests-chart-apache \
$BASEFOLDERPATH/apps/smoke/smoke-tests-chart/ -n smoke \
-f $BASEFOLDERPATH/apps/smoke/smoke-tests-chart/values-apache.yaml
#helm uninstall smoke-tests-chart-apache -n smoke

k apply -f $BASEFOLDERPATH/manifests/smoke/smoke-gateway.yaml -n smoke
#k delete -f $BASEFOLDERPATH/manifests/smoke/smoke-gateway.yaml -n smoke